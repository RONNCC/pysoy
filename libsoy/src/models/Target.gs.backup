/*
 *  libsoy - soy.models.Target
 *  Copyright (C) 2006,2007,2008,2009,2010,2011,2012 Copyleft Games Group
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WIsTHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program; if not, see http://www.gnu.org/licenses
 *
 */
[indent=4]
uses
    GL
    GLib

class soy.models.Target : soy.models.Model

    _face_objs : dict of int, weak soy.atoms.Face?
    _vert_objs : dict of int, weak soy.atoms.Vertex?
    
    _base : weak soy.bodies.Mesh
    _mutex : Mutex
    _verts : GLfloat*                 // px py pz nx ny nz tx ty tz ux uy uz

    _updated : bool

    _morphs : list of soy.atoms.Morph
    prop morphs : list of soy.atoms.Morph
        get
            return _morphs

    prop new length : int
        get
            return self._base.length
    
    init
        _mutex = new Mutex()
        // _morphs is a list of morphs to add to the mesh
        _morphs = new list of soy.atoms.Morph

        // _face_objs holds a weak reference for every Face object we've
        // created, mapped by its index offset, such that if the user requests
        // the same index twice we'll return the same object they already have
        // instead of creating a new one.
        _face_objs = new dict of int, weak soy.atoms.Face?
        _vert_objs = new dict of int, weak soy.atoms.Vertex?
    
    construct(mesh : soy.bodies.Mesh)
        _base = mesh
        self._resize(mesh.length)
        //populate verts
        if self.length is not 0
            self.set_raw_verts(mesh.get_raw_verts())

    final
        // free vertex buffer
        self._resize(0)

    def new get (index : int) : soy.atoms.Face?
        ret : soy.atoms.Face? = null

        //determine if index is out of bounds
        if index < 0 or index >= self.length 
            return null
        
        if self._face_objs.has_key(index)
            ret = _face_objs[index]

        else
            verts : list of soy.atoms.Vertex = new list of soy.atoms.Vertex 
            v : soy.atoms.Vertex
            //each vertex occupies 12 indices and there are 3 vertices per face
            var vert_index = index * 3
            var offset = index * 36
            for var i = 0 to 2
                vert_index += i
                if self._vert_objs.has_key(vert_index)
                    v = self._vert_objs[vert_index]

                else 
                    pos : soy.atoms.Position = new soy.atoms.Position(
                        (float) self._verts[offset],
                        (float) self._verts[offset+1],
                        (float) self._verts[offset+2]
                    )
                    norm : soy.atoms.Vector = new soy.atoms.Vector(
                        (float) self._verts[offset+3],
                        (float) self._verts[offset+4],
                        (float) self._verts[offset+5]
                    )
                    tex : soy.atoms.Position = new soy.atoms.Position(
                        (float) self._verts[offset+6],
                        (float) self._verts[offset+7],
                        (float) self._verts[offset+8]
                    )
                    tan : soy.atoms.Vector = new soy.atoms.Vector(
                        (float) self._verts[offset+9],
                        (float) self._verts[offset+10],
                        (float) self._verts[offset+11]
                    )
                    v = new soy.atoms.Vertex(pos,norm,tex,tan)
                v.weak_ref(self._vert_weak)
                self._vert_objs[vert_index] = v

                verts.add(v)

                //move offset to location of the next vertex
                offset += 12
                vert_index += 1

            //TODO - get material - this of course means we will have to a _faces registry that works similar to _verts
            ret = new soy.atoms.Face(verts[0],verts[1],verts[2])

        ret.on_set.connect(self._face_set)
        ret.weak_ref(self._face_weak)

        self._face_objs[index] = ret
        return #ret


    def new set (index : int, value : Object)
        face : soy.atoms.Face

        if not (value isa soy.atoms.Face)
            return
        
        face = (soy.atoms.Face) value
        
        if self._face_objs.has_key(index)
            var old = self._face_objs[index] 
            // remove face's verts from the weak reference list
            self._vert_weak(old.get(1))
            self._vert_weak(old.get(2))
            self._vert_weak(old.get(3))
            old.on_set.disconnect(self._face_set)
            old.weak_unref(self._face_weak)

        self._face_objs[index] = face

        //TODO - update materials
        self._update_verts(index, face)
        
        face.on_set.connect(self._face_set)
        face.weak_ref(self._face_weak)

        self._mutex.lock()
        self._updated = true
        self._mutex.unlock()

    def _face_weak(face : Object)
        // doing garbage collection
        // will also have to check for unused vertices so we can garbage collect them as well
        var garbage = new list of int
        for index in self._face_objs.keys
            if self._face_objs[index] is face
                // add the face to be garbage collected
                garbage.add(index)
        for index in garbage
            self._face_objs.unset(index)

    def _vert_weak(vert : Object)
        //garbage collection for vertex
        var garbage = new list of int
        for index in self._vert_objs.keys
            if self._vert_objs[index] is vert
                //add the vertex to be garbage collected
                garbage.add(index)
        for index in garbage
            self._vert_objs.unset(index)

    //update the correct vertices based on the byte mapping
    def _update_verts(index : int, face : soy.atoms.Face)
         
        //each vertex occupies 12 indices and there are 3 vertices per face
        var vert_index = index * 3
        var offset = index * 36

        for var i = 1 to 3
            // save the weak reference to _vert_objs
            if self._vert_objs.has_key(vert_index)
                // deference whatever vert is already there
                var old = self._vert_objs[vert_index]
                old.weak_unref(self._vert_weak)
            self._vert_objs[vert_index] = face.get(i)
            self._vert_objs[vert_index].weak_ref(self._vert_weak)
            self._verts[offset]   = (GLfloat) face.get(i).position.x
            self._verts[offset+1] = (GLfloat) face.get(i).position.y
            self._verts[offset+2] = (GLfloat) face.get(i).position.z
            self._verts[offset+3] = (GLfloat) face.get(i).normal.x
            self._verts[offset+4] = (GLfloat) face.get(i).normal.y
            self._verts[offset+5] = (GLfloat) face.get(i).normal.z
            self._verts[offset+6] = (GLfloat) face.get(i).texcoord.x
            self._verts[offset+7] = (GLfloat) face.get(i).texcoord.y
            self._verts[offset+8] = (GLfloat) face.get(i).texcoord.z
            self._verts[offset+9] = (GLfloat) face.get(i).tangent.x
            self._verts[offset+10]= (GLfloat) face.get(i).tangent.y
            self._verts[offset+11]= (GLfloat) face.get(i).tangent.z
            offset += 12 
            vert_index += 1

    def _face_set(face : soy.atoms.Face)
        for index in self._face_objs.keys
            if self._face_objs[index] is face
                //TODO - update materials
                self._update_verts(index, face)
        
        self._mutex.lock()
        self._updated = true
        self._mutex.unlock()

    // this will be a private method, called during the render pipeline; but for now I am leaving it public so it can be tested
    def apply_morphs()
        for morph in self._morphs
            //should probably be checking for overflows
            mtrx : GLfloat* = morph.matrix
            for var i = 0 to (self.length * 36)
                self._verts[i] += mtrx[i]

    def new get_raw_verts() : GLfloat*
        //obviously unacceptable, but I don't know how to make this data available outside the class
        // we don't want to create atoms for every single vertex because the overhead will be immense
        // and once we do optimization, self._verts will no longer adhere to our canonical ordering, further complicating things 
        // this is just a temporary workaround, so I can move forward elsewhere
        return self._verts    

    def new set_raw_verts(verts : GLfloat*)
        for var i = 0 to (self.length * 36)
            self._verts[i] = verts[i]

    def _resize(length :int)
        buffer_size : ulong

        self._mutex.lock()

        buffer_size = length * 36 * sizeof(GLfloat)

        if buffer_size is 0
            free(self._verts)
            self._verts = null
        else      
            if self._verts is null
                self._verts = (GLfloat*) malloc0(buffer_size)
            else
                self._verts = (GLfloat*) realloc(self._verts,buffer_size)
        
        self._updated = true
        self._mutex.unlock()
